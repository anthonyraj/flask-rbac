    # Configuration for Nginx
    server {
		server_name dev-pnq.onrule.com;
		listen 81 ssl spdy;
		# Not Working List
		# 8080 5001 9000 90

		#listen 443 default ssl;
		# enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
		# http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
		#resolver 8.8.8.8;
		#ssl_stapling on;
    		ssl_certificate /etc/nginx/ssl/server.crt;
		#ssl_trusted_certificate /etc/nginx/ssl/server.crt;
   		ssl_certificate_key /etc/nginx/ssl/server.key;
		keepalive_timeout 70;

		#Redirects non-standard port from http to https
 	        error_page 497  https://$host:$server_port$request_uri;

		# enable session resumption to improve https performance
		ssl_session_cache shared:SSL:50m;
		ssl_session_timeout 5m;

		# enables server-side protection from BEAST attacks
		# http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
		ssl_prefer_server_ciphers on;

		# disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

		# ciphers chosen for forward secrecy and compatibility
		# http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
		ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";


		# Add Headers
		add_header X-Frame-Options "SAMEORIGIN";
		add_header X-Frame-Options sameorigin;
		add_header X-UA-Compatible "IE=Edge,chrome=1";
	    	#add_header X-Your-Port-Header-Here $server_port;

		add_header X-Content-Type-Options nosniff;
		add_header X-XSS-Protection "1; mode=block";
		add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ajax.googleapis.com; style-src 'self' 'unsafe-inline' https://maxcdn.bootstrapcdn.com";
		add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

		#add_header Cache-Control "public";
		#add_header Cache-Control "public, must-revalidate, proxy-revalidate";
		add_header Cache-Control "no-cache, no-store, must-revalidate, private";
		#add_header Pragma "public";
		add_header Pragma "no-cache";
		expires max;

		#set $yourcustomheader $scheme$server_port;
    		#add_header X-Your-Custom-Header $yourcustomheader;

		access_log /var/log/nginx/access-rbac-dev.log;
		error_log /var/log/nginx/error-rbac-dev.log debug;

		

        # Settings to by-pass for static files 
        location /static  {
		alias /var/www/AccessControl/source/AccessControl/static;
        }

        # Serve a static file (ex. favico) outside static dir.
        location = /favico.ico  {
		root /var/www/AccessControl/source/AccessControl/static/images/onrule.ico;
        }

	#location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
        #	expires max;
       	#	add_header Pragma public;
        #	add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    	#}

        location / {
		#NAXSI Security
		#include /etc/nginx/naxsi.rules;
		include	/etc/nginx/ga_naxsi.rules;
		include uwsgi_params;

    		#uwsgi_pass 127.0.0.1:8008; # working
    		#uwsgi_pass 127.0.0.1:8080; # not working access denied for 127.0.0.1:8080

        	uwsgi_pass unix:/var/www/AccessControl/run/acl.sock;

		set $naxsi_libinjection_xss 0|1;
		set $naxsi_libinjection_sql 0|1;
    	}

	location /RequestDenied {
		return 418;
     	}

    }

#server {
#  listen 81;
#  server_name dev-pnq.onrule.com;
#  return 301 https://$host$request_uri;
#}
